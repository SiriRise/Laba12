#Вычислить сумму знакопеременного ряда |х*(2n+1)!|/(2n+1)!, где х-матрица ранга к (к и матрица задаются случайным образом),
#n - номер слагаемого. Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
#У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого  +.

import numpy as np
import random
from decimal import Decimal, getcontext
from math import factorial

def custom_sum(x, t):

    n = 1 # Номер слогаемого
    sign = 1 # Переменная для смены знака
    factor = factorial(2 * n + 1) # Вычисление факториала
    curr_sum = 0 # Переменная результата

    # Бесконечный цикл для вычисления ряда
    while True:

        curr_x = np.linalg.det((x * factor).astype("float64")) # Вычисляем определитель матрицы
        curr_term = Decimal((curr_x) / factor) # Вычисляем текущий член ряда
        curr_sum += sign * curr_term # Прибавляем его к результату

        # Проверка знаков после запятой
        if Decimal(curr_term).as_tuple().exponent * (-1) < t:
            break
        n += 1
        sign = -sign # Меняем знак
        factor = factorial(2 * n + 1)
    return curr_sum


try:
    # Ввод значения t (количества знаков после запятой)
    t = int(input("Введите число t, являющееся количеством знаков после запятой (точностью): "))
    while t > 100 or t < 1:  # ошибка в случае введения слишком малой точности
        t = int(input("Вы ввели число, неподходящее по условию, введите число t, большее или равное 1: \n"))

    print()

    # Генерация случайного значения k и матрицы x
    k = random.randint(2,10)
    x = np.random.uniform(-1, 1, (k, k))

    # Вывод матрицы x
    print("Сгенерированная матрица:")
    np.set_printoptions(linewidth=200)
    print(x)
    print()

    # Установка точности вычислений с учетом заданной
    getcontext().prec = t + 100
    # Вызов функции custom_sum для вычисления суммы ряда с заданной точностью t
    result = custom_sum(x, t)

    # Вывод результата с заданной точностью
    print(f"Сумма ряда с точностью {t} знаков после запятой: {result:.{t}f}")

# Ошибка на случай введения не числа в качестве точности
except ValueError:
    print("\nВведенный символ не является числом. Перезапустите программу и введите число.")
